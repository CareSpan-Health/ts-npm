"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1110],{6557:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=n(5893),s=n(1151);const i={sidebar_position:1},d="Value Object",c={id:"package/vo/Overview",title:"Overview",description:"repo: cscore/npm-package/cs-package",source:"@site/docs/01-package/01-vo/01-Overview.md",sourceDirName:"01-package/01-vo",slug:"/package/vo/Overview",permalink:"/ts-npm/docs/package/vo/Overview",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-package/01-vo/01-Overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Value Object (VO)",permalink:"/ts-npm/docs/category/value-object-vo"},next:{title:"User",permalink:"/ts-npm/docs/category/user"}},l={},a=[{value:"Instanciating",id:"instanciating",level:2},{value:"Constructor",id:"constructor",level:3},{value:"<code>init</code> and <code>normalizeProperties</code>",id:"init-and-normalizeproperties",level:3},{value:"VO Class Variables",id:"vo-class-variables",level:2},{value:"<code>properties</code>",id:"properties",level:3},{value:"<code>extensions</code>",id:"extensions",level:3},{value:"<code>resourceType</code>",id:"resourcetype",level:3},{value:"VO Class Functions",id:"vo-class-functions",level:2},{value:"VO.getProperty",id:"vogetproperty",level:3},{value:"VO.getProperty Parmeters",id:"vogetproperty-parmeters",level:4},{value:"VO.getProperty Return",id:"vogetproperty-return",level:4},{value:"HealthRecord Class Variables",id:"healthrecord-class-variables",level:2},{value:"<code>recordId</code>",id:"recordid",level:3},{value:"<code>categoryId</code>",id:"categoryid",level:3},{value:"HealthRecord Class Functions",id:"healthrecord-class-functions",level:2},{value:"HealthRecord.getField",id:"healthrecordgetfield",level:3},{value:"HealthRecord.getField Parameters",id:"healthrecordgetfield-parameters",level:4},{value:"HealthRecord.getField Return",id:"healthrecordgetfield-return",level:4},{value:"HealthRecord.setField",id:"healthrecordsetfield",level:3},{value:"HealthRecord.setField Parameters",id:"healthrecordsetfield-parameters",level:4},{value:"HealthRecord.toFhir",id:"healthrecordtofhir",level:3},{value:"HealthRecord.toFhir Return",id:"healthrecordtofhir-return",level:4},{value:"HealthRecord.init",id:"healthrecordinit",level:3}];function o(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"value-object",children:"Value Object"}),"\n",(0,t.jsxs)(r.p,{children:["repo: ",(0,t.jsx)(r.code,{children:"cscore/npm-package/cs-package"})]}),"\n",(0,t.jsx)(r.p,{children:"Value Object (VO) is used to work with"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"CareSpan Record Data - When pulling data from the database"}),"\n",(0,t.jsx)(r.li,{children:"CareSpan Save Data - When adding record to database"}),"\n",(0,t.jsx)(r.li,{children:"FHIR Date - When returning data as a resource"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"The VO also has business logic. For example, it can check if two users are in the same group."}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsx)(r.p,{children:"When naming the VO, the VO should match the database structure of CareSpan if possible"})}),"\n",(0,t.jsxs)(r.admonition,{type:"warning",children:[(0,t.jsx)(r.p,{children:"VO should not rely on any models or modules"}),(0,t.jsx)(r.p,{children:"VO should rely on data that gets passed in. This is how we can keep VOs test-able using unit testing"})]}),"\n",(0,t.jsx)(r.h2,{id:"instanciating",children:"Instanciating"}),"\n",(0,t.jsx)(r.h3,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(r.p,{children:"When creating new VO, we will using the new command to create an instance"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'const vital : VitalRecord = new VitalRecord(properties, "carespan" | "fhir");\n'})}),"\n",(0,t.jsx)(r.p,{children:"This is how you create a new VO instance"}),"\n",(0,t.jsxs)(r.h3,{id:"init-and-normalizeproperties",children:[(0,t.jsx)(r.code,{children:"init"})," and ",(0,t.jsx)(r.code,{children:"normalizeProperties"})]}),"\n",(0,t.jsx)(r.p,{children:"The constructor will save the properties"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"    constructor(properties: Record<string, any>, structureType: 'carespan' | 'fhir' = 'carespan') {\n        this.init(properties, structureType);\n        this.normalizeProperties();\n    }\n"})}),"\n",(0,t.jsxs)(r.p,{children:["You may use override ",(0,t.jsx)(r.code,{children:"init"})," and ",(0,t.jsx)(r.code,{children:"normalizeProperties"})," functions if you need to do something specific"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"init"})," is for any intialization"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"normalizeProperties"})," is to adjust any properties after initialization (e.g. adjusting time format and set it in ",(0,t.jsx)(r.code,{children:"extension"})," property)"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"vo-class-variables",children:"VO Class Variables"}),"\n",(0,t.jsx)(r.h3,{id:"properties",children:(0,t.jsx)(r.code,{children:"properties"})}),"\n",(0,t.jsx)(r.p,{children:"This is for saving the raw data coming out of the database"}),"\n",(0,t.jsx)(r.h3,{id:"extensions",children:(0,t.jsx)(r.code,{children:"extensions"})}),"\n",(0,t.jsxs)(r.p,{children:["This is for saving the adjusted data (within ",(0,t.jsx)(r.code,{children:"normalizeProperties"})," function). For example, assessment/evaluation (cat ",(0,t.jsx)(r.code,{children:"17"}),") will need extra computation based on the properties to see if the assessment/evaluation has been submitted."]}),"\n",(0,t.jsxs)(r.p,{children:["Once we have that figured out, we can save it in ",(0,t.jsx)(r.code,{children:"extensions"})]}),"\n",(0,t.jsx)(r.h3,{id:"resourcetype",children:(0,t.jsx)(r.code,{children:"resourceType"})}),"\n",(0,t.jsxs)(r.p,{children:["This is the CareSpan resource type that is unique per ",(0,t.jsx)(r.code,{children:"VO"})," class. This is how we can look at a ",(0,t.jsx)(r.code,{children:"JSON"})," and fit the resource in the right ",(0,t.jsx)(r.code,{children:"VO"})]}),"\n",(0,t.jsx)(r.h2,{id:"vo-class-functions",children:"VO Class Functions"}),"\n",(0,t.jsxs)(r.p,{children:["All ",(0,t.jsx)(r.code,{children:"VOs"})," have the following"]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"name"}),(0,t.jsx)(r.th,{children:"description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"getProperty"}),(0,t.jsxs)(r.td,{children:["Get a value from ",(0,t.jsx)(r.code,{children:"property"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"setProperty"}),(0,t.jsxs)(r.td,{children:["Set a value for ",(0,t.jsx)(r.code,{children:"property"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"appendProperties"}),(0,t.jsxs)(r.td,{children:["Merge an object to ",(0,t.jsx)(r.code,{children:"property"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"getExtension"}),(0,t.jsxs)(r.td,{children:["Get a value from ",(0,t.jsx)(r.code,{children:"extension"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"setExtension"}),(0,t.jsxs)(r.td,{children:["Set a value for ",(0,t.jsx)(r.code,{children:"extension"})]})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"vogetproperty",children:"VO.getProperty"}),"\n",(0,t.jsx)(r.h4,{id:"vogetproperty-parmeters",children:"VO.getProperty Parmeters"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"name"}),(0,t.jsx)(r.th,{children:"description"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"key : string"}),(0,t.jsxs)(r.td,{children:["The key for looking up a ",(0,t.jsx)(r.code,{children:"property"})]})]})})]}),"\n",(0,t.jsx)(r.h4,{id:"vogetproperty-return",children:"VO.getProperty Return"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsx)(r.tr,{children:(0,t.jsx)(r.th,{children:"description"})})}),(0,t.jsx)(r.tbody,{children:(0,t.jsx)(r.tr,{children:(0,t.jsxs)(r.td,{children:["the value of the ",(0,t.jsx)(r.code,{children:"property"})]})})})]}),"\n",(0,t.jsx)(r.h1,{id:"healthrecord-value-object",children:"HealthRecord Value Object"}),"\n",(0,t.jsxs)(r.p,{children:["repo: ",(0,t.jsx)(r.code,{children:"cscore/serverless/ehr/carespan-ehr"})]}),"\n",(0,t.jsxs)(r.p,{children:["HealthRecord ",(0,t.jsx)(r.code,{children:"VO"})," extends from ",(0,t.jsx)(r.code,{children:"VO"})]}),"\n",(0,t.jsxs)(r.p,{children:["This is a ",(0,t.jsx)(r.code,{children:"VO"})," that is used to manage the data stored in ",(0,t.jsx)(r.code,{children:"ehr"}),".",(0,t.jsx)(r.code,{children:"records"})," table. So it has all the variables and functions of VO and more."]}),"\n",(0,t.jsx)(r.h2,{id:"healthrecord-class-variables",children:"HealthRecord Class Variables"}),"\n",(0,t.jsx)(r.h3,{id:"recordid",children:(0,t.jsx)(r.code,{children:"recordId"})}),"\n",(0,t.jsxs)(r.p,{children:["This is the record id of a record from the ",(0,t.jsx)(r.code,{children:"ehr"}),".",(0,t.jsx)(r.code,{children:"records"})," table"]}),"\n",(0,t.jsx)(r.h3,{id:"categoryid",children:(0,t.jsx)(r.code,{children:"categoryId"})}),"\n",(0,t.jsx)(r.p,{children:"This is what the category id is for this record."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://carespan-health.github.io/dataset/docs/dataset/patient-health-records",children:"https://carespan-health.github.io/dataset/docs/dataset/patient-health-records"})}),"\n",(0,t.jsx)(r.h2,{id:"healthrecord-class-functions",children:"HealthRecord Class Functions"}),"\n",(0,t.jsxs)(r.p,{children:["All ",(0,t.jsx)(r.code,{children:"VOs"})," have the following"]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"name"}),(0,t.jsx)(r.th,{children:"description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"getField"}),(0,t.jsxs)(r.td,{children:["Get a value from ",(0,t.jsx)(r.code,{children:"propertie.fields"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"setField"}),(0,t.jsxs)(r.td,{children:["Set a value for ",(0,t.jsx)(r.code,{children:"propertie.fields"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"toCs"}),(0,t.jsx)(r.td,{children:"get the data in a structure can be used to save to the database"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"toFhir"}),(0,t.jsx)(r.td,{children:"get the data in FHIR resource"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"toFhirList"}),(0,t.jsxs)(r.td,{children:["get a list of FHIR resources",(0,t.jsx)("br",{}),"Sometimes, what we store on CareSpan is not a 1 to 1 match with FHIR"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"init (o)"}),(0,t.jsx)(r.td,{children:"Need to override init to parse FHIR if FHIR resource is passed in to the constructor"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"getEventDetail"}),(0,t.jsxs)(r.td,{children:["When working with EHR, we must track all the events (CRUD)",(0,t.jsx)("br",{}),"Hence, we wil populate this function to store the information we want to track"]})]})]})]}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsx)(r.p,{children:"o for overriding"})}),"\n",(0,t.jsx)(r.h3,{id:"healthrecordgetfield",children:"HealthRecord.getField"}),"\n",(0,t.jsx)(r.h4,{id:"healthrecordgetfield-parameters",children:"HealthRecord.getField Parameters"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"name"}),(0,t.jsx)(r.th,{children:"description"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"key : string"}),(0,t.jsxs)(r.td,{children:["The key for looking up a ",(0,t.jsx)(r.code,{children:"field"})]})]})})]}),"\n",(0,t.jsx)(r.h4,{id:"healthrecordgetfield-return",children:"HealthRecord.getField Return"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsx)(r.tr,{children:(0,t.jsx)(r.th,{children:"description"})})}),(0,t.jsx)(r.tbody,{children:(0,t.jsx)(r.tr,{children:(0,t.jsxs)(r.td,{children:["the value of the ",(0,t.jsx)(r.code,{children:"field"})]})})})]}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsx)(r.p,{children:"Field is tricky"}),(0,t.jsx)(r.p,{children:"When returning from the database, the structure looks like this:"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'// this is the interface\ninterface CsField {\n    label?: string;\n    ukey?: string | number | undefined;\n    units?: any | undefined;\n    recordid?: string[] | number[];\n    data: any[]\n}\n\n// this is what the object looks like\n{\n    label: "string"\n    ...\n    data:  [\n        <value>\n    ]\n}\n'})}),(0,t.jsx)(r.p,{children:"The return value will parse through all that and return"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"field?.data?.[0];\n"})})]}),"\n",(0,t.jsxs)(r.admonition,{type:"warning",children:[(0,t.jsxs)(r.p,{children:["There could be a scenario when you need to grabe ",(0,t.jsx)(r.code,{children:"field?.data"})," as an array"]}),(0,t.jsxs)(r.p,{children:["Please write a ",(0,t.jsx)(r.code,{children:"getList"})," function in ",(0,t.jsx)(r.code,{children:"HealthRecord"})," to do this"]})]}),"\n",(0,t.jsx)(r.h3,{id:"healthrecordsetfield",children:"HealthRecord.setField"}),"\n",(0,t.jsx)(r.h4,{id:"healthrecordsetfield-parameters",children:"HealthRecord.setField Parameters"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"name"}),(0,t.jsx)(r.th,{children:"description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"key : string"}),(0,t.jsxs)(r.td,{children:["The key for looking up a ",(0,t.jsx)(r.code,{children:"field"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"value : any"}),(0,t.jsxs)(r.td,{children:["Save thes value in ",(0,t.jsx)(r.code,{children:"field"})]})]})]})]}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsx)(r.p,{children:"Saving to field is tricky also. This function will wrap the value so it can be stored in the right structure"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"\n    setField(key: string, value: any) {\n        const field: CsField = {\n            data: [value],\n        }\n        // extrat error checking ...\n        this.properties.fields[key] = field;\n    }\n"})}),(0,t.jsxs)(r.p,{children:["See ",(0,t.jsx)(r.a,{href:"#healthrecordgetfield-return",children:"CsField"})]})]}),"\n",(0,t.jsx)(r.h3,{id:"healthrecordtofhir",children:"HealthRecord.toFhir"}),"\n",(0,t.jsx)(r.h4,{id:"healthrecordtofhir-return",children:"HealthRecord.toFhir Return"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsx)(r.tr,{children:(0,t.jsx)(r.th,{children:"description"})})}),(0,t.jsx)(r.tbody,{children:(0,t.jsx)(r.tr,{children:(0,t.jsx)(r.td,{children:"the VO in FHIR"})})})]}),"\n",(0,t.jsxs)(r.p,{children:["As of this writing, we will be using ",(0,t.jsx)(r.code,{children:"fhir/r5"})," from ",(0,t.jsx)(r.code,{children:"@types/fhir"})," package. For example"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'import { Annotation, CarePlan, Goal, Reference } from "fhir/r5";\n'})}),"\n",(0,t.jsx)(r.p,{children:"Here is an example of what toFhir would look like:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"toFhir(version: string = 'r5') {\n\n    const fhir:QuestionnaireResponse = {\n        resourceType: 'QuestionnaireResponse',\n        status: 'in-progress',\n        questionnaire: `Questionnaire/${this.getField('assessmentid')}`,\n        subject: {\n            reference: `Patient/${this.getProperty('patientGuid')}`,\n        },\n        authored: this.getReceivedAt(),\n    }\n    return fhir;\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"healthrecordinit",children:"HealthRecord.init"}),"\n",(0,t.jsxs)(r.p,{children:["The init function is triggered automatically by the constructor to populate ",(0,t.jsx)(r.code,{children:"properties"})," class variable"]}),"\n",(0,t.jsxs)(r.p,{children:["We want to make sure we can popualte ",(0,t.jsx)(r.code,{children:"properties"})," from both ",(0,t.jsx)(r.code,{children:"carespan"})," and ",(0,t.jsx)(r.code,{children:"fhir"})," objects"]}),"\n",(0,t.jsx)(r.p,{children:"Here is an example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"init(properties: Record<string, any>, structureType: \"carespan\" | \"fhir\" = \"carespan\") {\n    if (structureType == \"fhir\" && (properties as CarePlan)?.resourceType == \"CarePlan\") {\n\n        const fhir: CarePlan = properties as CarePlan;\n        const prop = {'fields': {}};\n\n        const concern = {\n            '0': 'patient',\n            'concern': fhir?.title\n        };\n\n        this.setField('concern', concern)\n\n        // there are more fields that got removed to keep example simple\n        // ...\n\n        // populate the `properties` using `prop`\n        super.init(prop, 'carespan');\n    }\n\n    super.init(properties, structureType);\n}\n\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>c,a:()=>d});var t=n(7294);const s={},i=t.createContext(s);function d(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);